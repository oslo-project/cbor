import { expect, test } from "vitest";
import { toFloat16, toFloat32, toFloat64 } from "./float.js";

test("toFloat16", () => {
	expect(toFloat16(new Uint8Array([0, 0]))).toBe(0);
	expect(toFloat16(new Uint8Array([0, 1]))).toBe(5.960464477539063e-8);
	expect(toFloat16(new Uint8Array([0x03, 0xff]))).toBe(0.00006097555160522461);
	expect(toFloat16(new Uint8Array([0x04, 0x00]))).toBe(0.00006103515625);
	expect(toFloat16(new Uint8Array([0x35, 0x55]))).toBe(0.333251953125);
	expect(toFloat16(new Uint8Array([0x3b, 0xff]))).toBe(0.99951171875);
	expect(toFloat16(new Uint8Array([0x3c, 0x00]))).toBe(1);
	expect(toFloat16(new Uint8Array([0x3c, 0x01]))).toBe(1.0009765625);
	expect(toFloat16(new Uint8Array([0x7b, 0xff]))).toBe(65504);
	expect(toFloat16(new Uint8Array([0x7c, 0x00]))).toBe(Infinity);
	expect(toFloat16(new Uint8Array([0x80, 0x00]))).toBe(-0);
	expect(toFloat16(new Uint8Array([0xc0, 0x00]))).toBe(-2);
	expect(toFloat16(new Uint8Array([0xfc, 0x00]))).toBe(-Infinity);
});

test("toFloat32", () => {
	expect(toFloat32(new Uint8Array([0x00, 0x00, 0x00, 0x01]))).toBe(1.401298464324817e-45);
	expect(toFloat32(new Uint8Array([0x00, 0x7f, 0xff, 0xff]))).toBe(1.1754942106924411e-38);
	expect(toFloat32(new Uint8Array([0x00, 0x80, 0x00, 0x00]))).toBe(1.1754943508222875e-38);
	expect(toFloat32(new Uint8Array([0x7f, 0x7f, 0xff, 0xff]))).toBe(3.4028234663852886e38);
	expect(toFloat32(new Uint8Array([0x3f, 0x7f, 0xff, 0xff]))).toBe(0.999999940395355225);
	expect(toFloat32(new Uint8Array([0x3f, 0x80, 0x00, 0x00]))).toBe(1);
	expect(toFloat32(new Uint8Array([0x3f, 0x80, 0x00, 0x01]))).toBe(1.00000011920928955);

	expect(toFloat32(new Uint8Array([0xc0, 0x00, 0x00, 0x00]))).toBe(-2);
	expect(toFloat32(new Uint8Array([0x00, 0x00, 0x00, 0x00]))).toBe(0);
	expect(toFloat32(new Uint8Array([0x80, 0x00, 0x00, 0x00]))).toBe(-0);
	expect(toFloat32(new Uint8Array([0x7f, 0x80, 0x00, 0x00]))).toBe(Infinity);
	expect(toFloat32(new Uint8Array([0xff, 0x80, 0x00, 0x00]))).toBe(-Infinity);
	expect(toFloat32(new Uint8Array([0x40, 0x49, 0x0f, 0xdb]))).toBe(3.14159274101257324);
	expect(toFloat32(new Uint8Array([0x3e, 0xaa, 0xaa, 0xab]))).toBe(0.333333343267440796);
	expect(toFloat32(new Uint8Array([0xff, 0xc0, 0x00, 0x01]))).toBe(NaN);
	expect(toFloat32(new Uint8Array([0xff, 0x80, 0x00, 0x01]))).toBe(NaN);
});

test("toFloat64", () => {
	expect(toFloat64(new Uint8Array([0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))).toBe(1);
	expect(toFloat64(new Uint8Array([0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]))).toBe(
		1.0000000000000002
	);
	expect(toFloat64(new Uint8Array([0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02]))).toBe(
		1.0000000000000004
	);
	expect(toFloat64(new Uint8Array([0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))).toBe(2);
	expect(toFloat64(new Uint8Array([0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))).toBe(-2);

	expect(toFloat64(new Uint8Array([0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))).toBe(3);
	expect(toFloat64(new Uint8Array([0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))).toBe(4);
	expect(toFloat64(new Uint8Array([0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))).toBe(5);
	expect(toFloat64(new Uint8Array([0x40, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))).toBe(6);
	expect(toFloat64(new Uint8Array([0x40, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))).toBe(23);
	expect(toFloat64(new Uint8Array([0x3f, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))).toBe(
		0.01171875
	);

	expect(toFloat64(new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]))).toBe(
		4.9406564584124654e-324
	);
	expect(toFloat64(new Uint8Array([0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]))).toBe(
		2.2250738585072009e-308
	);
	expect(toFloat64(new Uint8Array([0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))).toBe(
		2.2250738585072014e-308
	);
	expect(toFloat64(new Uint8Array([0x7f, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]))).toBe(
		1.7976931348623157e308
	);

	expect(toFloat64(new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))).toBe(0);
	expect(toFloat64(new Uint8Array([0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))).toBe(-0);
	expect(toFloat64(new Uint8Array([0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))).toBe(
		Infinity
	);
	expect(toFloat64(new Uint8Array([0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))).toBe(
		-Infinity
	);
	expect(toFloat64(new Uint8Array([0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]))).toBe(NaN);
	expect(toFloat64(new Uint8Array([0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]))).toBe(NaN);
	expect(toFloat64(new Uint8Array([0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]))).toBe(NaN);

	expect(toFloat64(new Uint8Array([0x3f, 0xd5, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]))).toBe(1 / 3);
	expect(toFloat64(new Uint8Array([0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18]))).toBe(Math.PI);
});
